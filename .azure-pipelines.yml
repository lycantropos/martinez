trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

jobs:
  - job: 'Windows'
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Python35_x86:
          python.version: '3.5'
          python.architecture: 'x86'
        Python35_x64:
          python.version: '3.5'
          python.architecture: 'x64'
        Python36_x86:
          python.version: '3.6'
          python.architecture: 'x86'
        Python36_x64:
          python.version: '3.6'
          python.architecture: 'x64'
        Python37_x86:
          python.version: '3.7'
          python.architecture: 'x86'
        Python37_x64:
          python.version: '3.7'
          python.architecture: 'x64'
        Python38_x86:
          python.version: '3.8'
          python.architecture: 'x86'
        Python38_x64:
          python.version: '3.8'
          python.architecture: 'x64'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: '$(python.architecture)'
      - script: python -m pip install --upgrade pip setuptools
        displayName: 'Install packaging tools'
      - script: python -m pip install --upgrade codecov
        displayName: 'Install codecov'
      - script: python -m pip install --force-reinstall -r requirements-setup.txt
        displayName: 'Install setup requirements'
      - script: python -m pip install --force-reinstall -r requirements.txt
        displayName: 'Install requirements'
      - script: python -m pip install --force-reinstall -r requirements-tests.txt
        displayName: 'Install tests requirements'
      - script: python -m pip install .
        displayName: 'Install'
      - script: pytest
        displayName: 'Run tests'
      - script: python -m doctest README.md
        displayName: 'Run doctests'
      - script: python -m codecov -f coverage.xml -X gcov
        condition: succeeded()
        displayName: 'Upload coverage'
        env:
          CODECOV_TOKEN: $(CODECOV_TOKEN)
      - script: python -m pip install --upgrade cibuildwheel
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Install build requirements'
      - bash:
          CIBW_BEFORE_BUILD='python -m pip install -r requirements-setup.txt'
          CIBW_BUILD=$(python -c 'import sys; print("cp" + "".join(map(str, sys.version_info[:2])) + "-*")')
          cibuildwheel --output-dir dist
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Build wheels'
      - script: python -m pip install --upgrade twine
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Install deployment requirements'
      - script: twine upload --skip-existing dist/*
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Deploy wheels'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: $(TWINE_PASSWORD)

  - job: 'MacOS'
    pool:
      vmImage: 'macOS-latest'
    strategy:
      matrix:
        Python35:
          python.version: '3.5'
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
      - script: python -m pip install --upgrade pip setuptools
        displayName: 'Install packaging tools'
      - script: python -m pip install --upgrade codecov
        displayName: 'Install codecov'
      - script: python -m pip install --upgrade gcovr
        displayName: 'Install gcovr'
      - script: python -m pip install --force-reinstall -r requirements-setup.txt
        displayName: 'Install setup requirements'
      - script: python -m pip install --force-reinstall -r requirements.txt
        displayName: 'Install requirements'
      - script: python -m pip install --force-reinstall -r requirements-tests.txt
        displayName: 'Install tests requirements'
      - script: python -m pip install -e .
        displayName: 'Install in editable mode'
        env:
          CXXFLAGS: --coverage -O0
      - script: pytest
        displayName: 'Run tests'
      - script: python -m doctest README.md
        displayName: 'Run doctests'
      - script: gcovr --filter src/ --filter include/ --xml -o coverage_cpp.xml
        displayName: 'Collect C++ coverage'
      - script: python -m codecov -f coverage.xml -X gcov
        condition: succeeded()
        displayName: 'Upload coverage'
        env:
          CODECOV_TOKEN: $(CODECOV_TOKEN)
      - script: python -m codecov -f coverage_cpp.xml -X gcov
        condition: succeeded()
        displayName: 'Upload C++ coverage'
        env:
          CODECOV_TOKEN: $(CODECOV_TOKEN)
      - script: python -m pip install --upgrade cibuildwheel
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Install build requirements'
      - bash:
          CIBW_BEFORE_BUILD='python -m pip install -r requirements-setup.txt'
          CIBW_BUILD=$(python -c 'import sys; print("cp" + "".join(map(str, sys.version_info[:2])) + "-*")')
          cibuildwheel --output-dir dist
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Build wheels'
      - script: python -m pip install --upgrade twine
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Install deployment requirements'
      - script: twine upload --skip-existing dist/*
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Deploy wheels'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: $(TWINE_PASSWORD)
